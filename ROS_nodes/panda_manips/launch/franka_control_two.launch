<?xml version="1.0" ?>
<launch>
  <arg name="robot_ip" />

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find panda_manips)/robots/panda_arm.urdf.xacro'" />
  <param name="panda_table_robot_description" command="$(find xacro)/xacro --inorder '$(find panda_manips)/robots/panda_arm.urdf.xacro'  robot_namespace:=panda_box" />
  <param name="panda_box_robot_description" command="$(find xacro)/xacro --inorder '$(find panda_manips)/robots/panda_arm.urdf.xacro'  robot_namespace:=panda_box" />

  
  <group ns="panda_box">

    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find panda_manips)/robots/panda_arm.urdf.xacro'  robot_namespace:=panda_box" />

    <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
      <rosparam command="load" file="$(find panda_manips)/config/franka_control_node.yaml" />
      <param name="robot_ip" value="172.16.0.3" />
    </node>

    <node pkg="tf" type="static_transform_publisher" name="world_ns_connector" args="0.11 -1.15 -0.27 0 0 0 1 /world /panda_box/world 100" />

    <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" />
    <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
      <param name="tf_prefix" value="panda_box"/>
    </node>
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam param="source_list">[franka_state_controller/joint_states] </rosparam>
      <param name="rate" value="30"/>
    </node>
    <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam param="source_list">[franka_state_controller/joint_states_desired] </rosparam>
      <param name="rate" value="30"/>
      <remap from="/panda_box/joint_states" to="/panda_box/joint_states_desired" />
    </node>
    <!-- polytope calculating node -->
    <param name="joint_state_topic" value="franka_state_controller/joint_states"/> 
    <node pkg="panda_capacity" name="panda_force_polytope" type="panda_force_polytope.py"/>
  </group>

  <group ns="panda_table">

    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find panda_manips)/robots/panda_arm.urdf.xacro'  robot_namespace:=panda_table" />
 
    <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
      <rosparam command="load" file="$(find panda_manips)/config/franka_control_node.yaml" />
      <param name="robot_ip" value="172.16.0.2" />
    </node>
    <node pkg="tf" type="static_transform_publisher" name="world_ns_connector" args="0 0 0 0 0 0 1 /world /panda_table/world 100" />

    <rosparam command="load" file="$(find franka_control)/config/default_controllers.yaml" />
    <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
      <param name="tf_prefix" value="panda_table"/>
    </node>
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam param="source_list">[franka_state_controller/joint_states] </rosparam>
      <param name="rate" value="30"/>
    </node>
    <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
      <rosparam param="source_list">[franka_state_controller/joint_states_desired] </rosparam>
      <param name="rate" value="30"/>
      <remap from="/panda_table/joint_states" to="/panda_table/joint_states_desired" />
    </node>
    <!-- polytope calculating node -->
    <param name="joint_state_topic" value="franka_state_controller/joint_states"/> 
    <node pkg="panda_capacity" name="panda_force_polytope" type="panda_force_polytope.py"/>
  </group>
<node pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find panda_manips)/launch/config_two.rviz"/>
</launch>
